@page
@model InventoryManagementSystem.Pages.Sales.CreateModel
@{
    ViewData["Title"] = "Create Sale";
}

<h1>Create Sale</h1>

<form method="post" onsubmit="return validateQuantities();">
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Total Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="salesTable">
            <tr>
                <td>
                    <select name="Sales[0].ProductId" class="form-control productDropdown" onchange="updateUnitPrice(this)">
                        <option value="">-- Select --</option>
                        @foreach (var product in Model.Products)
                        {
                            <option value="@product.Id" data-price="@product.Price" data-quantity="@product.Quantity">@product.Name (In stock: @product.Quantity)</option>
                        }
                    </select>
                </td>
                <td>
                    <input type="number" name="Sales[0].QuantitySold" class="form-control quantityInput" oninput="updateTotalPrice(this)" />
                    <span class="text-danger error-message"></span>
                </td>
                <td>
                    <input type="text" class="form-control unitPrice" readonly />
                </td>
                <td>
                    <input type="text" class="form-control totalPrice" readonly />
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                </td>
            </tr>
        </tbody>
    </table>

    <div class="form-group text-right">
        <label><strong>Grand Total:</strong></label>
        <input type="text" id="grandTotal" class="form-control text-right font-weight-bold" readonly style="max-width: 200px;" />
    </div>

    <br><br>
    <button type="button" class="btn btn-secondary" onclick="addRow()">Add Item</button>
    <br><br />
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        const products = [
            @foreach (var product in Model.Products)
            {
                @: { id: @product.Id, name: "@product.Name", price: @product.Price, quantity: @product.Quantity },
            }
        ];

        let rowIndex = 1;

        function createProductDropdown(name) {
            let html = `<select name="${name}" class="form-control productDropdown" onchange="updateUnitPrice(this)">
                            <option value="">-- Select --</option>`;
            products.forEach(p => {
                html += `<option value="${p.id}" data-price="${p.price}" data-quantity="${p.quantity}">
                            ${p.name} (In stock: ${p.quantity})
                         </option>`;
            });
            html += `</select>`;
            return html;
        }

        function addRow() {
            const table = document.getElementById("salesTable");
            const newRow = document.createElement("tr");

            newRow.innerHTML = `
                <td>${createProductDropdown(`Sales[${rowIndex}].ProductId`)}</td>
                <td>
                    <input type="number" name="Sales[${rowIndex}].QuantitySold" class="form-control quantityInput" oninput="updateTotalPrice(this)" />
                    <span class="text-danger error-message"></span>
                </td>
                <td><input type="text" class="form-control unitPrice" readonly /></td>
                <td><input type="text" class="form-control totalPrice" readonly /></td>
                <td><button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
            `;

            table.appendChild(newRow);
            rowIndex++;
        }

        function removeRow(button) {
            const row = button.closest("tr");
            row.remove();
            updateGrandTotal();
        }

        function updateUnitPrice(select) {
            const selectedOption = select.options[select.selectedIndex];
            const price = selectedOption.getAttribute("data-price");
            const row = select.closest("tr");
            row.querySelector(".unitPrice").value = price || "";
            updateTotalPrice(row.querySelector(".quantityInput"));
        }

        function updateTotalPrice(input) {
            const row = input.closest("tr");
            const unitPrice = parseFloat(row.querySelector(".unitPrice").value) || 0;
            const quantity = parseInt(input.value) || 0;
            const totalPrice = unitPrice * quantity;
            row.querySelector(".totalPrice").value = totalPrice.toFixed(2);
            updateGrandTotal();
        }

        function updateGrandTotal() {
            let total = 0;
            document.querySelectorAll(".totalPrice").forEach(tp => {
                const val = parseFloat(tp.value);
                if (!isNaN(val)) total += val;
            });
            document.getElementById("grandTotal").value = total.toFixed(2);
        }

        function validateQuantities() {
            let isValid = true;
            document.querySelectorAll("#salesTable tr").forEach(row => {
                const select = row.querySelector(".productDropdown");
                const quantityInput = row.querySelector(".quantityInput");
                const errorSpan = row.querySelector(".error-message");

                if (!select || !quantityInput || !errorSpan) return;

                const selectedOption = select.options[select.selectedIndex];
                const availableQty = parseInt(selectedOption.getAttribute("data-quantity")) || 0;
                const enteredQty = parseInt(quantityInput.value) || 0;

                if (enteredQty > availableQty) {
                    errorSpan.textContent = `Only ${availableQty} in stock.`;
                    isValid = false;
                } else {
                    errorSpan.textContent = "";
                }
            });

            return isValid;
        }
    </script>
}
